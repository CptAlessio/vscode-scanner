{"version":3,"file":"extension.js","mappings":"8CACA,IAAIA,EAAmBC,MAAQA,KAAKD,kBAAqBE,OAAOC,OAAS,SAAUC,EAAGC,EAAGC,EAAGC,QAC7EC,IAAPD,IAAkBA,EAAKD,GAC3B,IAAIG,EAAOP,OAAOQ,yBAAyBL,EAAGC,GACzCG,KAAS,QAASA,GAAQJ,EAAEM,WAAaF,EAAKG,UAAYH,EAAKI,gBAClEJ,EAAO,CAAEK,YAAY,EAAMC,IAAK,WAAa,OAAOV,EAAEC,EAAI,IAE5DJ,OAAOc,eAAeZ,EAAGG,EAAIE,EAChC,EAAI,SAAUL,EAAGC,EAAGC,EAAGC,QACTC,IAAPD,IAAkBA,EAAKD,GAC3BF,EAAEG,GAAMF,EAAEC,EACb,GACGW,EAAsBhB,MAAQA,KAAKgB,qBAAwBf,OAAOC,OAAS,SAAUC,EAAGc,GACxFhB,OAAOc,eAAeZ,EAAG,UAAW,CAAEU,YAAY,EAAMK,MAAOD,GAClE,EAAI,SAASd,EAAGc,GACbd,EAAW,QAAIc,CACnB,GACIE,EAAgBnB,MAAQA,KAAKmB,cAAiB,SAAUC,GACxD,GAAIA,GAAOA,EAAIV,WAAY,OAAOU,EAClC,IAAIC,EAAS,CAAC,EACd,GAAW,MAAPD,EAAa,IAAK,IAAIf,KAAKe,EAAe,YAANf,GAAmBJ,OAAOqB,UAAUC,eAAeC,KAAKJ,EAAKf,IAAIN,EAAgBsB,EAAQD,EAAKf,GAEtI,OADAW,EAAmBK,EAAQD,GACpBC,CACX,EACII,EAAazB,MAAQA,KAAKyB,WAAc,SAAUC,EAASC,EAAYC,EAAGC,GAE1E,OAAO,IAAKD,IAAMA,EAAIE,WAAU,SAAUC,EAASC,GAC/C,SAASC,EAAUf,GAAS,IAAMgB,EAAKL,EAAUM,KAAKjB,GAAS,CAAE,MAAOkB,GAAKJ,EAAOI,EAAI,CAAE,CAC1F,SAASC,EAASnB,GAAS,IAAMgB,EAAKL,EAAiB,MAAEX,GAAS,CAAE,MAAOkB,GAAKJ,EAAOI,EAAI,CAAE,CAC7F,SAASF,EAAKb,GAJlB,IAAeH,EAIaG,EAAOiB,KAAOP,EAAQV,EAAOH,QAJ1CA,EAIyDG,EAAOH,MAJhDA,aAAiBU,EAAIV,EAAQ,IAAIU,GAAE,SAAUG,GAAWA,EAAQb,EAAQ,KAIjBqB,KAAKN,EAAWI,EAAW,CAC7GH,GAAML,EAAYA,EAAUW,MAAMd,EAASC,GAAc,KAAKQ,OAClE,GACJ,EACAlC,OAAOc,eAAe0B,EAAS,aAAc,CAAEvB,OAAO,IACtDuB,EAAQC,WAAaD,EAAQE,cAAW,EACxC,MAAMC,EAASzB,EAAa,EAAQ,MAC9B0B,EAAK1B,EAAa,EAAQ,MAC1B2B,EAAO3B,EAAa,EAAQ,MAC5B4B,EAAyB,EAAQ,KAEjCC,EAAsBJ,EAAOK,OAAOC,+BAA+B,CACrEC,gBAAiB,uBACjBC,aAAa,IAMjB,SAASC,IAEL,OADeT,EAAOU,UAAUC,iBAAiB,mBACnCzC,IAAI,aAAe,EACrC,CAKA,SAAS0C,EAAuBC,GAC5B,OAAOhC,EAAUzB,UAAM,OAAQ,GAAQ,YACnC,MAAM0D,EAASd,EAAOU,UAAUC,iBAAiB,yBAC3CG,EAAOC,OAAO,WAAYF,EAAUb,EAAOgB,oBAAoBC,OACzE,GACJ,CAMA,SAASC,EAAoBC,GACzB,OAAOtC,EAAUzB,UAAM,OAAQ,GAAQ,YACnC,MAAMgE,QAAapB,EAAOK,OAAOgB,aAAa,CAC1CC,OAAQ,qBACRhD,OAAQ6C,aAAyC,EAASA,EAAQC,OAAS,GAC3EG,cAAejD,GAASA,EAAQ,KAAO,6BAE3C,IAAK8C,EACD,OACJ,MAAMI,QAAqBxB,EAAOK,OAAOgB,aAAa,CAClDC,OAAQ,sBACRhD,OAAQ6C,aAAyC,EAASA,EAAQA,UAAY,GAC9EI,cAAejD,IACX,IAEI,OADA,IAAImD,OAAOnD,GACJ,IACX,CACA,MAAOoD,GACH,MAAO,uBACX,KAGR,IAAKF,EACD,OACJ,MAAMG,QAAoB3B,EAAOK,OAAOgB,aAAa,CACjDC,OAAQ,4BACRhD,OAAQ6C,aAAyC,EAASA,EAAQQ,cAAgB,GAClFJ,cAAejD,GAASA,EAAQ,KAAO,4BAE3C,OAAKqD,EAEE,CAAEP,OAAMD,QAASK,EAAcG,oBAFtC,CAGJ,GACJ,CAwQA,SAASC,EAAgBC,GACrB,IAAIC,EAAe,EACnB,MAAMC,EAAaC,KAAKC,IAAIJ,EAAQK,OAAQ,KAC5C,IAAK,IAAIC,EAAI,EAAGA,EAAIJ,EAAYI,IAAK,CACjC,MAAMC,EAAWP,EAAQQ,WAAWF,IAE/BC,EAAW,KAAO,CAAC,EAAG,GAAI,IAAIE,SAASF,IAA2B,QAAbA,IACtDN,GAER,CAEA,OAAQA,EAAeC,EAAc,EACzC,CAlBAlC,EAAQE,SAnKR,SAAkBwC,GACd,MAAMC,EAAe,IAAIrC,EAAuBsC,qBAChDzC,EAAOK,OAAOqC,yBAAyB,kBAAmBF,GAE1DD,EAAQI,cAAcC,KAAK5C,EAAO6C,SAASC,gBAAgB,+BAA+B,IAAMjE,EAAUzB,UAAM,OAAQ,GAAQ,YAC5H,MAAM2F,QAAmB7B,IACzB,GAAI6B,EAAY,CACZ,MAAMlC,EAAWJ,IACjBI,EAAS+B,KAAKG,SACRnC,EAAuBC,GAC7Bb,EAAOK,OAAO2C,uBAAuB,2BAA2BD,EAAW3B,OAC/E,CACJ,MAAKpB,EAAO6C,SAASC,gBAAgB,gCAAgC,IAAMjE,EAAUzB,UAAM,OAAQ,GAAQ,YACvG,MAAMyD,EAAWJ,IACXwC,QAAiBjD,EAAOK,OAAO6C,cAAcrC,EAASsC,KAAIC,IAAK,CAAGC,MAAOD,EAAEhC,KAAMD,QAASiC,MAAO,CAAEE,YAAa,2BACtH,GAAIL,EAAU,CACV,MAAMM,QAAuBrC,EAAoB+B,EAAS9B,SAC1D,GAAIoC,EAAgB,CAChB,MAAMC,EAAQ3C,EAAS4C,WAAUL,GAAKA,EAAEhC,OAAS6B,EAAS9B,QAAQC,OAClEP,EAAS2C,GAASD,QACZ3C,EAAuBC,GAC7Bb,EAAOK,OAAO2C,uBAAuB,6BAA6BO,EAAenC,OACrF,CACJ,CACJ,MAAKpB,EAAO6C,SAASC,gBAAgB,kCAAkC,IAAMjE,EAAUzB,UAAM,OAAQ,GAAQ,YACzG,MAAMyD,EAAWJ,IACXwC,QAAiBjD,EAAOK,OAAO6C,cAAcrC,EAASsC,KAAIC,IAAK,CAAGC,MAAOD,EAAEhC,KAAMD,QAASiC,MAAO,CAAEE,YAAa,6BACtH,GAAIL,EAAU,CACV,MAAMS,EAAkB7C,EAAS8C,QAAOP,GAAKA,EAAEhC,OAAS6B,EAAS9B,QAAQC,aACnER,EAAuB8C,GAC7B1D,EAAOK,OAAO2C,uBAAuB,6BAA6BC,EAAS9B,QAAQC,OACvF,CACJ,OAQApB,EAAO6C,SAASC,gBAAgB,6BAA8Bc,IAC1D5D,EAAOU,UAAUmD,iBAAiBD,EAAQE,MAAMnE,MAAKoE,IACjD/D,EAAOK,OAAO2D,iBAAiBD,GAAKpE,MAAKsE,IAErC,MAAMC,EAAQ,IAAIlE,EAAOmE,MAAMP,EAAQQ,KAAO,EAAG,EAAGR,EAAQQ,KAAO,EAAGR,EAAQS,MAAMnC,QACpF+B,EAAOK,UAAY,IAAItE,EAAOuE,UAAUL,EAAMM,MAAON,EAAMO,KAC3DR,EAAOS,YAAYR,GAEnB,MAAMS,EAAkB,IAAI3E,EAAOmE,MAAMP,EAAQQ,KAAO,EAAG,EAAGR,EAAQQ,KAAO,EAAGQ,OAAOC,WACvFZ,EAAOa,eAAe1E,EAAqB,CAACuE,IAE5C,MAAMI,EAAa/E,EAAOU,UAAUsE,wBAAuBC,IACnDA,EAAUC,IAAIC,aAAepB,EAAImB,IAAIC,aACrClB,EAAOa,eAAe1E,EAAqB,IAC3C2E,EAAWK,UACf,GACF,GACJ,GACJ,IAON,MAAMC,EAAgBrF,EAAOsF,UAAUC,sBAAsB,CAAEC,OAAQ,QAAU,CAC7E,YAAAC,CAAaC,EAAUC,EAAUC,GAE7B,MAAMC,EAAWrD,EAAasD,cACxBC,EAAaJ,EAASvB,KAAO,EAC7BR,EAAUiC,EAASG,MAAKC,GAAKA,EAAEnC,OAAS4B,EAASR,IAAIgB,QACvDD,EAAE7B,OAAS2B,IACf,GAAInC,EAAS,CACT,MAAMjC,EAAciC,EAAQjC,aAAe,0BAC3C,OAAO,IAAI3B,EAAOmG,MAAMxE,EAC5B,CACA,OAAO,IACX,IAEJY,EAAQI,cAAcC,KAAKyC,GAO3B,IAAIN,EAAa/E,EAAO6C,SAASC,gBAAgB,6BAA6B,IAAMjE,EAAUzB,UAAM,OAAQ,GAAQ,YAChH,IACI,MAAMgJ,EAAmB3F,IACzB,GAAgC,IAA5B2F,EAAiBlE,OAEjB,YADAlC,EAAOK,OAAOgG,mBAAmB,oEAIrC,MAAMC,QAActG,EAAOU,UAAU6F,UAAU,OAAQ,sBACvD,IAAIV,EAAW,GACXW,EAAe,EAEnB,MAAMC,EAAmB,IAAIC,IAAI,CAC7B,OAAQ,OAAQ,OAAQ,OAAQ,SAAU,OAC1C,OAAQ,QAAS,OAAQ,OAAQ,OAAQ,QACzC,OAAQ,OAAQ,OAAQ,MAAO,MAAO,OACtC,OAAQ,OAAQ,OAAQ,OAAQ,OAChC,OAAQ,OAAQ,QAAS,SACzB,OAAQ,OAAQ,OAAQ,MACxB,MAAO,QAAS,SAChB,WAGJ,IAAK,MAAM5C,KAAQwC,EACf,IAEI,MAAMK,EAAY7C,EAAK5D,KAAK0G,cAAcC,MAAM,KAAKC,MACrD,GAAIH,GAAaF,EAAiBM,IAAI,IAAMJ,GAAY,CACpDH,IACA,QACJ,CAEA,MACMQ,SADiBhH,EAAOU,UAAUmD,iBAAiBC,IACnCmD,UAEhBC,EAAgBF,EAAKG,MAAM,EAAG,KACpC,GAAID,EAAc5E,SAAS,OAASV,EAAgBsF,GAAgB,CAChEV,IACA,QACJ,CACA,MAAMY,EAAQJ,EAAKH,MAAM,MACzBT,EAAiBiB,SAAQ,EAAGjG,OAAMD,UAASQ,kBACvC,MAAM2F,EAAQ,IAAI7F,OAAON,GACzBiG,EAAMC,SAAQ,CAACjD,EAAMZ,KACb8D,EAAMC,KAAKnD,IACXyB,EAASjD,KAAK,IAAIzC,EAAuBqH,gBAAgBpG,EAAM0C,EAAKoC,OAAQ1C,EAAQ,EAAGY,EAAKqD,OAAQ9F,GACxG,GACF,GAEV,CACA,MAAO+F,GAEHC,QAAQC,IAAI,uBAAuB9D,EAAKoC,WAAWwB,KACnDlB,GACJ,CAGJhE,EAAaqF,QAAQhC,GAEG,IAApBA,EAAS3D,OACTlC,EAAOK,OAAO2C,uBAAuB,+BAA+BwD,yBAGpExG,EAAOK,OAAO2C,uBAAuB,SAAS6C,EAAS3D,oCAAoCsE,wBAEnG,CACA,MAAOkB,GACH1H,EAAOK,OAAOyH,iBAAiB,wBAA0BJ,EAC7D,CACJ,MACAnF,EAAQI,cAAcC,KAAKmC,GAE3BxC,EAAQI,cAAcC,KAAK5C,EAAO6C,SAASC,gBAAgB,mCAAmC,MAvMlG,SAA6B+C,GACzB,IAAInE,EACG7C,EAAUzB,UAAM,OAAQ,GAAQ,YACnC,IAEI,MAAM2K,EAA+D,QAA5CrG,EAAK1B,EAAOU,UAAUsH,wBAAqC,IAAPtG,OAAgB,EAASA,EAAG,GACzG,IAAKqG,EACD,MAAM,IAAIE,MAAM,6BAGpB,MAAMC,EAAahI,EAAKiI,KAAKJ,EAAgB7C,IAAIgB,OAAQ,oBACpDjG,EAAGmI,WAAWF,IACfjI,EAAGoI,UAAUH,EAAY,CAAEI,WAAW,IAG1C,MAAMC,GAAO,IAAIC,MAAOC,cAAc5B,MAAM,KAAK,GAC3C6B,EAAaxI,EAAKiI,KAAKD,EAAY,eAAeK,QAElDI,QAlElB,SAA+B9C,GAC3B,OAAOhH,EAAUzB,UAAM,OAAQ,GAAQ,YACnC,IAAIwL,EAAS,6BAEb,GADAA,GAAU,kBAAiB,IAAIJ,MAAOK,uBACd,IAApBhD,EAAS3D,OAET,OADA0G,GAAU,gCACHA,EAEXA,GAAU,iCAAiC/C,EAAS3D,aAEpD,MAAM4G,EAAgB,IAAIC,IAC1BlD,EAASwB,SAAQzD,IACb,MAAMiC,EAAWiD,EAAc5K,IAAI0F,EAAQxC,OAAS,GACpDyE,EAASjD,KAAKgB,GACdkF,EAAcE,IAAIpF,EAAQxC,KAAMyE,EAAS,IAG7C,IAAK,MAAOoD,EAAaC,KAAoBJ,EAAcK,UAAW,CAClEP,GAAU,MAAMK,QAChBL,GAAU,SAASM,EAAgBhH,yBACnC,IAAK,MAAM0B,KAAWsF,EAAiB,CACnCN,GAAU,OAAOhF,EAAQxC,WACzBwH,GAAU,iBAAiBhF,EAAQE,QAAQF,EAAQQ,WACnDwE,GAAU,eAAehF,EAAQjC,aAAe,iCAChD,IACI,MACMyF,SADoBpH,EAAOU,UAAUT,GAAGmJ,SAASpJ,EAAOqJ,IAAIvF,KAAKF,EAAQE,QACrDqB,WAAW0B,MAAM,MACrCyC,EAAYtH,KAAKuH,IAAI,EAAG3F,EAAQQ,KAAO,GACvCoF,EAAUxH,KAAKC,IAAImF,EAAMlF,OAAS,EAAG0B,EAAQQ,KAAO,GAC1DwE,GAAU,6BACV,IAAK,IAAIzG,EAAImH,EAAWnH,GAAKqH,EAASrH,IAElCyG,GAAU,GADSzG,IAAMyB,EAAQQ,KAAO,EAAI,KAAO,OACzBjC,EAAI,MAAMiF,EAAMjF,OAE9CyG,GAAU,SACd,CACA,MAAOlB,GACHkB,GAAU,4CACd,CACJ,CACJ,CACA,OAAOA,CACX,GACJ,CAuBwCa,CAAsB5D,GAClD5F,EAAGyJ,cAAchB,EAAYC,GAE7B,MAAM5E,QAAY/D,EAAOU,UAAUmD,iBAAiB6E,SAC9C1I,EAAOK,OAAO2D,iBAAiBD,GACrC/D,EAAOK,OAAO2C,uBAAuB,yCACzC,CACA,MAAO0E,GACH1H,EAAOK,OAAOyH,iBAAiB,qCAAuCJ,EAC1E,CACJ,GACJ,CA4KQiC,CADiBnH,EAAasD,cACD,IAErC,EA4BAjG,EAAQC,WAJR,WAEIM,EAAoBgF,SACxB,C,sBC/XA,IAAIjI,EAAmBC,MAAQA,KAAKD,kBAAqBE,OAAOC,OAAS,SAAUC,EAAGC,EAAGC,EAAGC,QAC7EC,IAAPD,IAAkBA,EAAKD,GAC3B,IAAIG,EAAOP,OAAOQ,yBAAyBL,EAAGC,GACzCG,KAAS,QAASA,GAAQJ,EAAEM,WAAaF,EAAKG,UAAYH,EAAKI,gBAClEJ,EAAO,CAAEK,YAAY,EAAMC,IAAK,WAAa,OAAOV,EAAEC,EAAI,IAE5DJ,OAAOc,eAAeZ,EAAGG,EAAIE,EAChC,EAAI,SAAUL,EAAGC,EAAGC,EAAGC,QACTC,IAAPD,IAAkBA,EAAKD,GAC3BF,EAAEG,GAAMF,EAAEC,EACb,GACGW,EAAsBhB,MAAQA,KAAKgB,qBAAwBf,OAAOC,OAAS,SAAUC,EAAGc,GACxFhB,OAAOc,eAAeZ,EAAG,UAAW,CAAEU,YAAY,EAAMK,MAAOD,GAClE,EAAI,SAASd,EAAGc,GACbd,EAAW,QAAIc,CACnB,GACIE,EAAgBnB,MAAQA,KAAKmB,cAAiB,SAAUC,GACxD,GAAIA,GAAOA,EAAIV,WAAY,OAAOU,EAClC,IAAIC,EAAS,CAAC,EACd,GAAW,MAAPD,EAAa,IAAK,IAAIf,KAAKe,EAAe,YAANf,GAAmBJ,OAAOqB,UAAUC,eAAeC,KAAKJ,EAAKf,IAAIN,EAAgBsB,EAAQD,EAAKf,GAEtI,OADAW,EAAmBK,EAAQD,GACpBC,CACX,EACApB,OAAOc,eAAe0B,EAAS,aAAc,CAAEvB,OAAO,IACtDuB,EAAQ4C,qBAAuB5C,EAAQ+J,aAAe/J,EAAQgK,gBAAkBhK,EAAQ2H,qBAAkB,EAC1G,MAAMxH,EAASzB,EAAa,EAAQ,MAC9B2B,EAAO3B,EAAa,EAAQ,MAsBlCsB,EAAQ2H,gBAjBR,MASI,WAAAsC,CAAY1I,EAAM0C,EAAMM,EAAMC,EAAO1C,GACjCvE,KAAKgE,KAAOA,EACZhE,KAAK0G,KAAOA,EACZ1G,KAAKgH,KAAOA,EACZhH,KAAKiH,MAAQA,EACbjH,KAAKuE,YAAcA,CACvB,GAOJ,MAAMkI,UAAwB7J,EAAO+J,SAMjC,WAAAD,CAAYzG,EAAOwC,GACfmE,MAAM,GAAG3G,MAAUwC,EAAS3D,UAAW2D,EAAS3D,OAAS,EAAIlC,EAAOiK,yBAAyBC,UAAYlK,EAAOiK,yBAAyBE,MACzI/M,KAAKiG,MAAQA,EACbjG,KAAKyI,SAAWA,EAChBzI,KAAKgN,aAAe,UACpBhN,KAAKiN,QAAU,GAAGxE,EAAS3D,kCAAkCmB,IAC7DjG,KAAKkN,SAAW,CACZC,MAAOvK,EAAOqJ,IAAIvF,KAAK5D,EAAKiI,KAAKqC,UAAW,KAAM,YAAa,QAAS,eACxEC,KAAMzK,EAAOqJ,IAAIvF,KAAK5D,EAAKiI,KAAKqC,UAAW,KAAM,YAAa,OAAQ,eAE9E,EAEJ3K,EAAQgK,gBAAkBA,EAK1B,MAAMD,UAAqB5J,EAAO+J,SAK9B,WAAAD,CAAYlG,GACRoG,MAAM9J,EAAKwK,SAAS9G,EAAQE,OAC5B1G,KAAKwG,QAAUA,EACfxG,KAAKuE,YAAc,QAAQiC,EAAQQ,OACnChH,KAAKiN,QAAU,GAAGzG,EAAQS,YAAYT,EAAQjC,aAAe,KAC7DvE,KAAKkN,SAAW,CACZC,MAAOvK,EAAOqJ,IAAIvF,KAAK5D,EAAKiI,KAAKqC,UAAW,KAAM,YAAa,QAAS,gBACxEC,KAAMzK,EAAOqJ,IAAIvF,KAAK5D,EAAKiI,KAAKqC,UAAW,KAAM,YAAa,OAAQ,iBAE1EpN,KAAKgN,aAAe,UACpBhN,KAAKuN,QAAU,CACXA,QAAS,4BACTC,MAAO,YACPC,UAAW,CAACjH,IAEhBxG,KAAK0N,YAAc9K,EAAOqJ,IAAIvF,KAAKF,EAAQE,KAC/C,EAEJjE,EAAQ+J,aAAeA,EA8DvB/J,EAAQ4C,qBAzDR,MACI,WAAAqH,GACI1M,KAAKyI,SAAW,GAChBzI,KAAK2N,qBAAuB,IAAI/K,EAAOgL,aAIvC5N,KAAK6N,oBAAsB7N,KAAK2N,qBAAqBG,KACzD,CAKA,WAAApF,GACI,OAAO1I,KAAKyI,QAChB,CAKA,OAAAgC,CAAQhC,GACJzI,KAAKyI,SAAWA,EAChBzI,KAAK2N,qBAAqBI,UAAKxN,EACnC,CAMA,WAAAyN,CAAYC,GACR,OAAOA,CACX,CAOA,WAAAC,CAAYD,GACR,IAAKA,EAAS,CAEV,MAAMvC,EAAgB,IAAIC,IAC1B3L,KAAKyI,SAASwB,SAAQzD,IAClB,MAAMiC,EAAWiD,EAAc5K,IAAI0F,EAAQxC,OAAS,GACpDyE,EAASjD,KAAKgB,GACdkF,EAAcE,IAAIpF,EAAQxC,KAAMyE,EAAS,IAE7C,MAAMhF,EAAW0K,MAAMC,KAAK1C,EAAcK,WAAWhG,KAAI,EAAE/B,EAAMyE,KAAc,IAAIgE,EAAgBzI,EAAMyE,KACzG,OAAO3G,QAAQC,QAAQ0B,EAC3B,CACA,OAAIwK,aAAmBxB,EAEZ3K,QAAQC,QAAQkM,EAAQxF,SAAS1C,KAAIS,GAAW,IAAIgG,EAAahG,MAErE1E,QAAQC,QAAQ,GAC3B,E,UChKJsM,EAAO5L,QAAU6L,QAAQ,S,UCAzBD,EAAO5L,QAAU6L,QAAQ,K,UCAzBD,EAAO5L,QAAU6L,QAAQ,O,GCCrBC,EAA2B,CAAC,ECE5BC,EDCJ,SAASC,EAAoBC,GAE5B,IAAIC,EAAeJ,EAAyBG,GAC5C,QAAqBnO,IAAjBoO,EACH,OAAOA,EAAalM,QAGrB,IAAI4L,EAASE,EAAyBG,GAAY,CAGjDjM,QAAS,CAAC,GAOX,OAHAmM,EAAoBF,GAAUlN,KAAK6M,EAAO5L,QAAS4L,EAAQA,EAAO5L,QAASgM,GAGpEJ,EAAO5L,OACf,CCnB0BgM,CAAoB,K","sources":[".././src/extension.ts",".././src/securityTreeProvider.ts","../external commonjs \"vscode\"","../external node-commonjs \"fs\"","../external node-commonjs \"path\"","../webpack/bootstrap","../webpack/startup"],"sourcesContent":["\"use strict\";\r\nvar __createBinding = (this && this.__createBinding) || (Object.create ? (function(o, m, k, k2) {\r\n    if (k2 === undefined) k2 = k;\r\n    var desc = Object.getOwnPropertyDescriptor(m, k);\r\n    if (!desc || (\"get\" in desc ? !m.__esModule : desc.writable || desc.configurable)) {\r\n      desc = { enumerable: true, get: function() { return m[k]; } };\r\n    }\r\n    Object.defineProperty(o, k2, desc);\r\n}) : (function(o, m, k, k2) {\r\n    if (k2 === undefined) k2 = k;\r\n    o[k2] = m[k];\r\n}));\r\nvar __setModuleDefault = (this && this.__setModuleDefault) || (Object.create ? (function(o, v) {\r\n    Object.defineProperty(o, \"default\", { enumerable: true, value: v });\r\n}) : function(o, v) {\r\n    o[\"default\"] = v;\r\n});\r\nvar __importStar = (this && this.__importStar) || function (mod) {\r\n    if (mod && mod.__esModule) return mod;\r\n    var result = {};\r\n    if (mod != null) for (var k in mod) if (k !== \"default\" && Object.prototype.hasOwnProperty.call(mod, k)) __createBinding(result, mod, k);\r\n    __setModuleDefault(result, mod);\r\n    return result;\r\n};\r\nvar __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {\r\n    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }\r\n    return new (P || (P = Promise))(function (resolve, reject) {\r\n        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }\r\n        function rejected(value) { try { step(generator[\"throw\"](value)); } catch (e) { reject(e); } }\r\n        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }\r\n        step((generator = generator.apply(thisArg, _arguments || [])).next());\r\n    });\r\n};\r\nObject.defineProperty(exports, \"__esModule\", { value: true });\r\nexports.deactivate = exports.activate = void 0;\r\nconst vscode = __importStar(require(\"vscode\"));\r\nconst fs = __importStar(require(\"fs\"));\r\nconst path = __importStar(require(\"path\"));\r\nconst securityTreeProvider_1 = require(\"./securityTreeProvider\");\r\n// Add these constants at the top of the file after imports\r\nconst highlightDecoration = vscode.window.createTextEditorDecorationType({\r\n    backgroundColor: 'rgba(255, 0, 0, 0.2)',\r\n    isWholeLine: true,\r\n});\r\n/**\r\n * Gets security patterns from VS Code settings\r\n * @returns Array of security patterns\r\n */\r\nfunction getSecurityPatterns() {\r\n    const config = vscode.workspace.getConfiguration('securityScanner');\r\n    return config.get('patterns') || [];\r\n}\r\n/**\r\n * Updates security patterns in VS Code settings\r\n * @param patterns - Array of security patterns to save\r\n */\r\nfunction updateSecurityPatterns(patterns) {\r\n    return __awaiter(this, void 0, void 0, function* () {\r\n        const config = vscode.workspace.getConfiguration('securityScanner');\r\n        yield config.update('patterns', patterns, vscode.ConfigurationTarget.Global);\r\n    });\r\n}\r\n/**\r\n * Shows an input box to collect pattern information from the user\r\n * @param pattern - Optional existing pattern to edit\r\n * @returns A new or updated security pattern, or undefined if cancelled\r\n */\r\nfunction showPatternInputBox(pattern) {\r\n    return __awaiter(this, void 0, void 0, function* () {\r\n        const name = yield vscode.window.showInputBox({\r\n            prompt: 'Enter pattern name',\r\n            value: (pattern === null || pattern === void 0 ? void 0 : pattern.name) || '',\r\n            validateInput: value => value ? null : 'Pattern name is required'\r\n        });\r\n        if (!name)\r\n            return undefined;\r\n        const regexPattern = yield vscode.window.showInputBox({\r\n            prompt: 'Enter regex pattern',\r\n            value: (pattern === null || pattern === void 0 ? void 0 : pattern.pattern) || '',\r\n            validateInput: value => {\r\n                try {\r\n                    new RegExp(value);\r\n                    return null;\r\n                }\r\n                catch (_a) {\r\n                    return 'Invalid regex pattern';\r\n                }\r\n            }\r\n        });\r\n        if (!regexPattern)\r\n            return undefined;\r\n        const description = yield vscode.window.showInputBox({\r\n            prompt: 'Enter pattern description',\r\n            value: (pattern === null || pattern === void 0 ? void 0 : pattern.description) || '',\r\n            validateInput: value => value ? null : 'Description is required'\r\n        });\r\n        if (!description)\r\n            return undefined;\r\n        return { name, pattern: regexPattern, description };\r\n    });\r\n}\r\n/**\r\n * Generates a detailed security report in markdown format\r\n * @param findings - Array of security findings to include in the report\r\n * @returns Promise resolving to the generated report content\r\n */\r\nfunction generateReportContent(findings) {\r\n    return __awaiter(this, void 0, void 0, function* () {\r\n        let report = '# Security Scan Report\\n\\n';\r\n        report += `Generated on: ${new Date().toLocaleString()}\\n\\n`;\r\n        if (findings.length === 0) {\r\n            report += '## No security issues found\\n';\r\n            return report;\r\n        }\r\n        report += `## Summary\\n\\nTotal findings: ${findings.length}\\n\\n`;\r\n        // Group findings by pattern\r\n        const patternGroups = new Map();\r\n        findings.forEach(finding => {\r\n            const findings = patternGroups.get(finding.name) || [];\r\n            findings.push(finding);\r\n            patternGroups.set(finding.name, findings);\r\n        });\r\n        // Add findings by pattern\r\n        for (const [patternName, patternFindings] of patternGroups.entries()) {\r\n            report += `## ${patternName}\\n\\n`;\r\n            report += `Found ${patternFindings.length} instance(s)\\n\\n`;\r\n            for (const finding of patternFindings) {\r\n                report += `### ${finding.name}\\n\\n`;\r\n                report += `**Location:** ${finding.file}:${finding.line}\\n\\n`;\r\n                report += `**Impact:** ${finding.description || 'No description available'}\\n\\n`;\r\n                try {\r\n                    const fileContent = yield vscode.workspace.fs.readFile(vscode.Uri.file(finding.file));\r\n                    const lines = fileContent.toString().split('\\n');\r\n                    const startLine = Math.max(0, finding.line - 4);\r\n                    const endLine = Math.min(lines.length - 1, finding.line + 2);\r\n                    report += '**Code Context:**\\n\\n```\\n';\r\n                    for (let i = startLine; i <= endLine; i++) {\r\n                        const linePrefix = i === finding.line - 1 ? '> ' : '  ';\r\n                        report += `${linePrefix}${i + 1}: ${lines[i]}\\n`;\r\n                    }\r\n                    report += '```\\n\\n';\r\n                }\r\n                catch (error) {\r\n                    report += '**Error:** Could not read file content\\n\\n';\r\n                }\r\n            }\r\n        }\r\n        return report;\r\n    });\r\n}\r\n/**\r\n * Creates a security report file and opens it\r\n * @param findings - Array of security findings to include in the report\r\n */\r\nfunction createAndOpenReport(findings) {\r\n    var _a;\r\n    return __awaiter(this, void 0, void 0, function* () {\r\n        try {\r\n            // Ensure we have a workspace folder\r\n            const workspaceFolder = (_a = vscode.workspace.workspaceFolders) === null || _a === void 0 ? void 0 : _a[0];\r\n            if (!workspaceFolder) {\r\n                throw new Error('No workspace folder found');\r\n            }\r\n            // Create security-reports directory if it doesn't exist\r\n            const reportsDir = path.join(workspaceFolder.uri.fsPath, 'security-reports');\r\n            if (!fs.existsSync(reportsDir)) {\r\n                fs.mkdirSync(reportsDir, { recursive: true });\r\n            }\r\n            // Generate filename with current date\r\n            const date = new Date().toISOString().split('T')[0];\r\n            const reportPath = path.join(reportsDir, `scan-report-${date}.md`);\r\n            // Generate and write report content\r\n            const reportContent = yield generateReportContent(findings);\r\n            fs.writeFileSync(reportPath, reportContent);\r\n            // Open the report file\r\n            const doc = yield vscode.workspace.openTextDocument(reportPath);\r\n            yield vscode.window.showTextDocument(doc);\r\n            vscode.window.showInformationMessage('Security report generated successfully');\r\n        }\r\n        catch (error) {\r\n            vscode.window.showErrorMessage('Error generating security report: ' + error);\r\n        }\r\n    });\r\n}\r\n/**\r\n * Activates the security scanner extension.\r\n * This is the main entry point of the extension that sets up:\r\n * - Tree view for security findings\r\n * - File opening and highlighting functionality\r\n * - Hover provider for security issues\r\n * - Code scanning command\r\n * - Pattern management commands\r\n *\r\n * @param context - The extension context provided by VS Code\r\n */\r\nfunction activate(context) {\r\n    const treeProvider = new securityTreeProvider_1.SecurityTreeProvider();\r\n    vscode.window.registerTreeDataProvider('securityScanner', treeProvider);\r\n    // Register pattern management commands\r\n    context.subscriptions.push(vscode.commands.registerCommand('security-scanner.addPattern', () => __awaiter(this, void 0, void 0, function* () {\r\n        const newPattern = yield showPatternInputBox();\r\n        if (newPattern) {\r\n            const patterns = getSecurityPatterns();\r\n            patterns.push(newPattern);\r\n            yield updateSecurityPatterns(patterns);\r\n            vscode.window.showInformationMessage(`Added security pattern: ${newPattern.name}`);\r\n        }\r\n    })), vscode.commands.registerCommand('security-scanner.editPattern', () => __awaiter(this, void 0, void 0, function* () {\r\n        const patterns = getSecurityPatterns();\r\n        const selected = yield vscode.window.showQuickPick(patterns.map(p => ({ label: p.name, pattern: p })), { placeHolder: 'Select pattern to edit' });\r\n        if (selected) {\r\n            const updatedPattern = yield showPatternInputBox(selected.pattern);\r\n            if (updatedPattern) {\r\n                const index = patterns.findIndex(p => p.name === selected.pattern.name);\r\n                patterns[index] = updatedPattern;\r\n                yield updateSecurityPatterns(patterns);\r\n                vscode.window.showInformationMessage(`Updated security pattern: ${updatedPattern.name}`);\r\n            }\r\n        }\r\n    })), vscode.commands.registerCommand('security-scanner.removePattern', () => __awaiter(this, void 0, void 0, function* () {\r\n        const patterns = getSecurityPatterns();\r\n        const selected = yield vscode.window.showQuickPick(patterns.map(p => ({ label: p.name, pattern: p })), { placeHolder: 'Select pattern to remove' });\r\n        if (selected) {\r\n            const updatedPatterns = patterns.filter(p => p.name !== selected.pattern.name);\r\n            yield updateSecurityPatterns(updatedPatterns);\r\n            vscode.window.showInformationMessage(`Removed security pattern: ${selected.pattern.name}`);\r\n        }\r\n    })));\r\n    /**\r\n     * Opens a file and highlights the line containing a security finding.\r\n     * Creates a temporary decoration to highlight the vulnerable line and\r\n     * automatically removes the highlight when the document is closed.\r\n     *\r\n     * @param finding - The security finding to display\r\n     */\r\n    vscode.commands.registerCommand('security-scanner.openFile', (finding) => {\r\n        vscode.workspace.openTextDocument(finding.file).then(doc => {\r\n            vscode.window.showTextDocument(doc).then(editor => {\r\n                // Highlight the line\r\n                const range = new vscode.Range(finding.line - 1, 0, finding.line - 1, finding.match.length);\r\n                editor.selection = new vscode.Selection(range.start, range.end);\r\n                editor.revealRange(range);\r\n                // Add the decoration to highlight the entire line\r\n                const decorationRange = new vscode.Range(finding.line - 1, 0, finding.line - 1, Number.MAX_VALUE);\r\n                editor.setDecorations(highlightDecoration, [decorationRange]);\r\n                // Remove the decoration when the editor is closed\r\n                const disposable = vscode.workspace.onDidCloseTextDocument(closedDoc => {\r\n                    if (closedDoc.uri.toString() === doc.uri.toString()) {\r\n                        editor.setDecorations(highlightDecoration, []);\r\n                        disposable.dispose();\r\n                    }\r\n                });\r\n            });\r\n        });\r\n    });\r\n    /**\r\n     * Provides hover information for security findings.\r\n     * When hovering over a line with a security issue, displays\r\n     * the description of the security concern.\r\n     */\r\n    const hoverProvider = vscode.languages.registerHoverProvider({ scheme: 'file' }, {\r\n        provideHover(document, position, token) {\r\n            // Check if this position matches any of our findings\r\n            const findings = treeProvider.getFindings();\r\n            const lineNumber = position.line + 1;\r\n            const finding = findings.find(f => f.file === document.uri.fsPath &&\r\n                f.line === lineNumber);\r\n            if (finding) {\r\n                const description = finding.description || 'Security issue detected';\r\n                return new vscode.Hover(description);\r\n            }\r\n            return null;\r\n        }\r\n    });\r\n    context.subscriptions.push(hoverProvider);\r\n    /**\r\n     * Scans workspace files for security patterns.\r\n     * Gets patterns from VS Code settings,\r\n     * searches through all workspace files (excluding node_modules),\r\n     * and updates the tree view with any findings.\r\n     */\r\n    let disposable = vscode.commands.registerCommand('security-scanner.scanCode', () => __awaiter(this, void 0, void 0, function* () {\r\n        try {\r\n            const securityPatterns = getSecurityPatterns();\r\n            if (securityPatterns.length === 0) {\r\n                vscode.window.showWarningMessage('No security patterns configured. Add patterns in settings first.');\r\n                return;\r\n            }\r\n            // Get all text documents\r\n            const files = yield vscode.workspace.findFiles('**/*', '**/node_modules/**');\r\n            let findings = [];\r\n            let skippedFiles = 0;\r\n            // Common binary file extensions to skip\r\n            const binaryExtensions = new Set([\r\n                '.dll', '.exe', '.obj', '.bin', '.cache', '.pdb',\r\n                '.jpg', '.jpeg', '.png', '.gif', '.ico', '.webp',\r\n                '.pdf', '.zip', '.tar', '.gz', '.7z', '.rar',\r\n                '.mp3', '.mp4', '.avi', '.mov', '.wmv',\r\n                '.ttf', '.otf', '.woff', '.woff2',\r\n                '.pyc', '.pyo', '.pyd', '.md',\r\n                '.so', '.resx', '.dylib',\r\n                '.class'\r\n            ]);\r\n            // Scan each file\r\n            for (const file of files) {\r\n                try {\r\n                    // Skip files with binary extensions\r\n                    const extension = file.path.toLowerCase().split('.').pop();\r\n                    if (extension && binaryExtensions.has('.' + extension)) {\r\n                        skippedFiles++;\r\n                        continue;\r\n                    }\r\n                    // Try to detect binary content\r\n                    const document = yield vscode.workspace.openTextDocument(file);\r\n                    const text = document.getText();\r\n                    // Simple binary detection: check for null bytes or high percentage of non-printable characters\r\n                    const firstFewBytes = text.slice(0, 1000); // Check first 1000 characters\r\n                    if (firstFewBytes.includes('\\0') || isBinaryContent(firstFewBytes)) {\r\n                        skippedFiles++;\r\n                        continue;\r\n                    }\r\n                    const lines = text.split('\\n');\r\n                    securityPatterns.forEach(({ name, pattern, description }) => {\r\n                        const regex = new RegExp(pattern);\r\n                        lines.forEach((line, index) => {\r\n                            if (regex.test(line)) {\r\n                                findings.push(new securityTreeProvider_1.SecurityFinding(name, file.fsPath, index + 1, line.trim(), description));\r\n                            }\r\n                        });\r\n                    });\r\n                }\r\n                catch (error) {\r\n                    // Log the error but continue scanning other files\r\n                    console.log(`Error scanning file ${file.fsPath}: ${error}`);\r\n                    skippedFiles++;\r\n                }\r\n            }\r\n            // Update tree view with findings\r\n            treeProvider.refresh(findings);\r\n            // Show summary message\r\n            if (findings.length === 0) {\r\n                vscode.window.showInformationMessage(`No security patterns found. ${skippedFiles} files were skipped.`);\r\n            }\r\n            else {\r\n                vscode.window.showInformationMessage(`Found ${findings.length} security pattern matches. ${skippedFiles} files were skipped.`);\r\n            }\r\n        }\r\n        catch (error) {\r\n            vscode.window.showErrorMessage('Error scanning code: ' + error);\r\n        }\r\n    }));\r\n    context.subscriptions.push(disposable);\r\n    // Register the report generation command\r\n    context.subscriptions.push(vscode.commands.registerCommand('security-scanner.generateReport', () => {\r\n        const findings = treeProvider.getFindings();\r\n        createAndOpenReport(findings);\r\n    }));\r\n}\r\nexports.activate = activate;\r\n/**\r\n * Checks if content appears to be binary by looking at the ratio of non-printable characters\r\n * @param content - The content to check\r\n * @returns true if the content appears to be binary\r\n */\r\nfunction isBinaryContent(content) {\r\n    let nonPrintable = 0;\r\n    const sampleSize = Math.min(content.length, 1000);\r\n    for (let i = 0; i < sampleSize; i++) {\r\n        const charCode = content.charCodeAt(i);\r\n        // Check for non-printable characters (excluding common whitespace)\r\n        if ((charCode < 32 && ![9, 10, 13].includes(charCode)) || charCode === 0xFFFD) {\r\n            nonPrintable++;\r\n        }\r\n    }\r\n    // If more than 10% of characters are non-printable, consider it binary\r\n    return (nonPrintable / sampleSize) > 0.1;\r\n}\r\n/**\r\n * Handles extension deactivation.\r\n * Cleans up resources by disposing the highlight decoration.\r\n */\r\nfunction deactivate() {\r\n    // Clean up the decoration type\r\n    highlightDecoration.dispose();\r\n}\r\nexports.deactivate = deactivate;\r\n","\"use strict\";\r\nvar __createBinding = (this && this.__createBinding) || (Object.create ? (function(o, m, k, k2) {\r\n    if (k2 === undefined) k2 = k;\r\n    var desc = Object.getOwnPropertyDescriptor(m, k);\r\n    if (!desc || (\"get\" in desc ? !m.__esModule : desc.writable || desc.configurable)) {\r\n      desc = { enumerable: true, get: function() { return m[k]; } };\r\n    }\r\n    Object.defineProperty(o, k2, desc);\r\n}) : (function(o, m, k, k2) {\r\n    if (k2 === undefined) k2 = k;\r\n    o[k2] = m[k];\r\n}));\r\nvar __setModuleDefault = (this && this.__setModuleDefault) || (Object.create ? (function(o, v) {\r\n    Object.defineProperty(o, \"default\", { enumerable: true, value: v });\r\n}) : function(o, v) {\r\n    o[\"default\"] = v;\r\n});\r\nvar __importStar = (this && this.__importStar) || function (mod) {\r\n    if (mod && mod.__esModule) return mod;\r\n    var result = {};\r\n    if (mod != null) for (var k in mod) if (k !== \"default\" && Object.prototype.hasOwnProperty.call(mod, k)) __createBinding(result, mod, k);\r\n    __setModuleDefault(result, mod);\r\n    return result;\r\n};\r\nObject.defineProperty(exports, \"__esModule\", { value: true });\r\nexports.SecurityTreeProvider = exports.SecurityFile = exports.SecurityPattern = exports.SecurityFinding = void 0;\r\nconst vscode = __importStar(require(\"vscode\"));\r\nconst path = __importStar(require(\"path\"));\r\n/**\r\n * Represents a security finding in the codebase.\r\n * Contains information about the location and nature of a potential security issue.\r\n */\r\nclass SecurityFinding {\r\n    /**\r\n     * Creates a new SecurityFinding instance.\r\n     * @param name - The identifier or type of the security issue\r\n     * @param file - The absolute path to the file containing the issue\r\n     * @param line - The line number where the issue was found\r\n     * @param match - The actual code snippet that triggered the finding\r\n     * @param description - Optional detailed description of the security issue\r\n     */\r\n    constructor(name, file, line, match, description) {\r\n        this.name = name;\r\n        this.file = file;\r\n        this.line = line;\r\n        this.match = match;\r\n        this.description = description;\r\n    }\r\n}\r\nexports.SecurityFinding = SecurityFinding;\r\n/**\r\n * Represents a group of security findings of the same type in the tree view.\r\n * Acts as a parent node in the tree view that can be collapsed/expanded.\r\n */\r\nclass SecurityPattern extends vscode.TreeItem {\r\n    /**\r\n     * Creates a new SecurityPattern instance.\r\n     * @param label - The name of the security pattern category\r\n     * @param findings - Array of security findings that match this pattern\r\n     */\r\n    constructor(label, findings) {\r\n        super(`${label} (${findings.length})`, findings.length > 0 ? vscode.TreeItemCollapsibleState.Collapsed : vscode.TreeItemCollapsibleState.None);\r\n        this.label = label;\r\n        this.findings = findings;\r\n        this.contextValue = 'pattern';\r\n        this.tooltip = `${findings.length} finding(s) for pattern: ${label}`;\r\n        this.iconPath = {\r\n            light: vscode.Uri.file(path.join(__dirname, '..', 'resources', 'light', 'shield.svg')),\r\n            dark: vscode.Uri.file(path.join(__dirname, '..', 'resources', 'dark', 'shield.svg'))\r\n        };\r\n    }\r\n}\r\nexports.SecurityPattern = SecurityPattern;\r\n/**\r\n * Represents a file containing security findings in the tree view.\r\n * Provides UI elements and commands for interacting with the finding.\r\n */\r\nclass SecurityFile extends vscode.TreeItem {\r\n    /**\r\n     * Creates a new SecurityFile instance.\r\n     * @param finding - The security finding associated with this file\r\n     */\r\n    constructor(finding) {\r\n        super(path.basename(finding.file));\r\n        this.finding = finding;\r\n        this.description = `Line ${finding.line}`;\r\n        this.tooltip = `${finding.match}\\n\\n${finding.description || ''}`;\r\n        this.iconPath = {\r\n            light: vscode.Uri.file(path.join(__dirname, '..', 'resources', 'light', 'warning.svg')),\r\n            dark: vscode.Uri.file(path.join(__dirname, '..', 'resources', 'dark', 'warning.svg'))\r\n        };\r\n        this.contextValue = 'finding';\r\n        this.command = {\r\n            command: 'security-scanner.openFile',\r\n            title: 'Open File',\r\n            arguments: [finding]\r\n        };\r\n        this.resourceUri = vscode.Uri.file(finding.file);\r\n    }\r\n}\r\nexports.SecurityFile = SecurityFile;\r\n/**\r\n * Provides the data for the security findings tree view.\r\n * Manages the hierarchical display of security findings in VS Code's tree view.\r\n */\r\nclass SecurityTreeProvider {\r\n    constructor() {\r\n        this.findings = [];\r\n        this._onDidChangeTreeData = new vscode.EventEmitter();\r\n        /**\r\n         * Event that fires when the tree data changes, triggering a refresh of the view\r\n         */\r\n        this.onDidChangeTreeData = this._onDidChangeTreeData.event;\r\n    }\r\n    /**\r\n     * Returns all current security findings.\r\n     * @returns Array of all security findings currently displayed in the tree\r\n     */\r\n    getFindings() {\r\n        return this.findings;\r\n    }\r\n    /**\r\n     * Updates the tree view with new findings.\r\n     * @param findings - New array of security findings to display\r\n     */\r\n    refresh(findings) {\r\n        this.findings = findings;\r\n        this._onDidChangeTreeData.fire(undefined);\r\n    }\r\n    /**\r\n     * Gets the tree item for a given element.\r\n     * @param element - The tree item to return\r\n     * @returns The tree item as is\r\n     */\r\n    getTreeItem(element) {\r\n        return element;\r\n    }\r\n    /**\r\n     * Gets the children for a given element in the tree.\r\n     * At root level, returns pattern groups. For patterns, returns files with findings.\r\n     * @param element - Optional parent element to get children for\r\n     * @returns Promise resolving to an array of tree items\r\n     */\r\n    getChildren(element) {\r\n        if (!element) {\r\n            // Root level - group findings by pattern\r\n            const patternGroups = new Map();\r\n            this.findings.forEach(finding => {\r\n                const findings = patternGroups.get(finding.name) || [];\r\n                findings.push(finding);\r\n                patternGroups.set(finding.name, findings);\r\n            });\r\n            const patterns = Array.from(patternGroups.entries()).map(([name, findings]) => new SecurityPattern(name, findings));\r\n            return Promise.resolve(patterns);\r\n        }\r\n        if (element instanceof SecurityPattern) {\r\n            // Pattern level - show files with findings\r\n            return Promise.resolve(element.findings.map(finding => new SecurityFile(finding)));\r\n        }\r\n        return Promise.resolve([]);\r\n    }\r\n}\r\nexports.SecurityTreeProvider = SecurityTreeProvider;\r\n","module.exports = require(\"vscode\");","module.exports = require(\"fs\");","module.exports = require(\"path\");","// The module cache\nvar __webpack_module_cache__ = {};\n\n// The require function\nfunction __webpack_require__(moduleId) {\n\t// Check if module is in cache\n\tvar cachedModule = __webpack_module_cache__[moduleId];\n\tif (cachedModule !== undefined) {\n\t\treturn cachedModule.exports;\n\t}\n\t// Create a new module (and put it into the cache)\n\tvar module = __webpack_module_cache__[moduleId] = {\n\t\t// no module.id needed\n\t\t// no module.loaded needed\n\t\texports: {}\n\t};\n\n\t// Execute the module function\n\t__webpack_modules__[moduleId].call(module.exports, module, module.exports, __webpack_require__);\n\n\t// Return the exports of the module\n\treturn module.exports;\n}\n\n","// startup\n// Load entry module and return exports\n// This entry module is referenced by other modules so it can't be inlined\nvar __webpack_exports__ = __webpack_require__(265);\n"],"names":["__createBinding","this","Object","create","o","m","k","k2","undefined","desc","getOwnPropertyDescriptor","__esModule","writable","configurable","enumerable","get","defineProperty","__setModuleDefault","v","value","__importStar","mod","result","prototype","hasOwnProperty","call","__awaiter","thisArg","_arguments","P","generator","Promise","resolve","reject","fulfilled","step","next","e","rejected","done","then","apply","exports","deactivate","activate","vscode","fs","path","securityTreeProvider_1","highlightDecoration","window","createTextEditorDecorationType","backgroundColor","isWholeLine","getSecurityPatterns","workspace","getConfiguration","updateSecurityPatterns","patterns","config","update","ConfigurationTarget","Global","showPatternInputBox","pattern","name","showInputBox","prompt","validateInput","regexPattern","RegExp","_a","description","isBinaryContent","content","nonPrintable","sampleSize","Math","min","length","i","charCode","charCodeAt","includes","context","treeProvider","SecurityTreeProvider","registerTreeDataProvider","subscriptions","push","commands","registerCommand","newPattern","showInformationMessage","selected","showQuickPick","map","p","label","placeHolder","updatedPattern","index","findIndex","updatedPatterns","filter","finding","openTextDocument","file","doc","showTextDocument","editor","range","Range","line","match","selection","Selection","start","end","revealRange","decorationRange","Number","MAX_VALUE","setDecorations","disposable","onDidCloseTextDocument","closedDoc","uri","toString","dispose","hoverProvider","languages","registerHoverProvider","scheme","provideHover","document","position","token","findings","getFindings","lineNumber","find","f","fsPath","Hover","securityPatterns","showWarningMessage","files","findFiles","skippedFiles","binaryExtensions","Set","extension","toLowerCase","split","pop","has","text","getText","firstFewBytes","slice","lines","forEach","regex","test","SecurityFinding","trim","error","console","log","refresh","showErrorMessage","workspaceFolder","workspaceFolders","Error","reportsDir","join","existsSync","mkdirSync","recursive","date","Date","toISOString","reportPath","reportContent","report","toLocaleString","patternGroups","Map","set","patternName","patternFindings","entries","readFile","Uri","startLine","max","endLine","generateReportContent","writeFileSync","createAndOpenReport","SecurityFile","SecurityPattern","constructor","TreeItem","super","TreeItemCollapsibleState","Collapsed","None","contextValue","tooltip","iconPath","light","__dirname","dark","basename","command","title","arguments","resourceUri","_onDidChangeTreeData","EventEmitter","onDidChangeTreeData","event","fire","getTreeItem","element","getChildren","Array","from","module","require","__webpack_module_cache__","__webpack_exports__","__webpack_require__","moduleId","cachedModule","__webpack_modules__"],"sourceRoot":""}